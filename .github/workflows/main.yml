name: vprofile actions
on: workflow_dispatch
env: 
  AWS_REGION: us-east-1
  ECR_REPOSITORY: gitops-repository
  EKS_CLUSTER: vprofile-eks

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
    
      - name: Maven Test
        run: mvn test
    
      - name: checkstyle
        run: mvn checkstyle:checkstyle

      - name: Set Java 11
        uses: actions/setup-java@v3
        with:
         distribution: 'temurin'
         java-version: '11'

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarQube Scan
        run: sonar-scanner
         -Dsonar.host.url=${{ secrets.SONAR_URL }}
         -Dsonar.login=${{ secrets.SONAR_TOKEN }}
         -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
         -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
         -Dsonar.sources=src/
         -Dsonar.junit.reportsPath=target/surefire-reports/ 
         -Dsonar.jacoco.reportsPath=target/jacoco.exec 
         -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
         -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

      - name: SonarQube Quality Gate check 
        id: Sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
      # force to fail step after specific time
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
         SONAR_HOST_URL: ${{secrets.SONAR_URL}}
      
  BUILD_AND_PUBLISH: 
    needs: Testing
    runs-on: ubuntu-latest
    steps: 
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Build Image and Upload to ECR
        uses: appleboy/docker-ecr-action@master
        with:
         access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
         secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         registry: ${{ secrets.REGISTRY }}
         repo: ${{ env.ECR_REPOSITORY }}
         region: ${{ env.AWS_REGION }}
         tags: latest,${{ github.run_number }}
         daemon_off: false
         dockerfile: ./Dockerfile
         context: ./ 
  
  DEPLOY_TO_EKS:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Get Kube Config File
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION}} --name ${{env.EKS_CLUSTER}}

      - name: Print config file     
        run: cat ~/.kube/config
     
      - name: Login to ECR
        run: kubectl create secret docker-registry regcred --docker-server=${{secrets.REGISTRY}} --docker-username=AWS --docker-password=$(aws ecr get-login-password)

      - name: Deploy To Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER }}
          chart-path: helm/vprofilecharts
          namespace: default
          values: appimage=${{secrets.REGISTRY}}/${{env.ECR_REPOSITORY}},apptag=${{github.run_number}}
          name: vprofile-stack
